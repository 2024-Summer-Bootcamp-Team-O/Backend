services:
  backend_blue:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend_blue
    expose:
      - "8000"
    volumes:
      - .:/app
    command: >
      sh -c "sleep 10 &&
            python manage.py makemigrations &&
            python manage.py migrate &&
            python manage.py collectstatic --no-input &&
            gunicorn rumz.wsgi:application --bind 0.0.0.0:8000 --timeout 120 --workers 4 --max-requests 1000"
    tty: true
    networks:
      - MZ

  redis:
    image: redis:6.0
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - MZ

  rabbitmq:
    image: rabbitmq:3.7-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    expose:
      - 5672
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
    depends_on:
      - backend_blue
    networks:
      - MZ

  celery:
    container_name: celery
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
    command: sh -c "celery -A rumz worker -l info"
    networks:
      - MZ
    depends_on:
      - rabbitmq
      - backend_blue

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - MZ
    depends_on:
      - backend_blue

  grafana:
    image: grafana/grafana
    container_name: grafana
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - MZ
    depends_on:
      - prometheus

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    restart: always
    networks:
      - MZ

networks:
  MZ:
    driver: bridge

volumes:
    grafana-storage: